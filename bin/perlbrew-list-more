#!perl

# DATE
# VERSION

use 5.010001;
use strict;
use warnings;

use App::PerlbrewUtils;
use Perinci::CmdLine::Any;

our %SPEC;

$SPEC{list_more} = {
    v => 1.1,
    summary => 'List installed perls, but show more information',
    args => {
        %App::PerlbrewUtils::common_args,
    },
};
sub list_more {
    require App::perlbrew;
    require File::Which;
    require Module::CoreList::More;

    my %args = @_;

    my $probe_path = File::Which::which("__perlbrewutils-probe")
        or return [412, "Can't find probe script __perlbrewutils-probe ".
                   "in PATH, make sure App::PerlbrewUtils has been ".
                   "installed first"];

    my $pb = App::perlbrew->new;
    my @perls = $pb->installed_perls;

    my @res;
    my %resmeta = ('table.fields' => [qw/name version num_modules num_core_modules num_noncore_modules/]);
    for my $perl (@perls) {
        next unless App::PerlbrewUtils::_filter_perl($perl, \%args);

        my $info_str = `$perl->{executable} $probe_path`;
        my $info = eval $info_str;
        next if $@;

        my %core_modules = Module::CoreList::More->list_core_modules(
            version->parse($perl->{version}));

        my $num_core_modules = 0;
        my $num_noncore_modules = 0;
        for (keys %{$info->{modules}}) {
            if (defined $core_modules{$_}) {
                $num_core_modules++;
            } else {
                $num_noncore_modules++;
            }
        }

        push @res, {
            name        => $perl->{version},
            version     => $perl->{version},
            num_modules => scalar(keys %{$info->{modules}}),
            num_core_modules    => $num_core_modules,
            num_noncore_modules => $num_noncore_modules,
        };
    }
    [200, "OK", \@res, \%resmeta];
}

Perinci::CmdLine::Any->new(
    url => '/main/list_more',
)->run;

# ABSTRACT:
# PODNAME:

=head1 DESCRIPTION

Like `perlbrew list` but show more information for each perl: number of
installed modules, number of installed core & non-core modules.
